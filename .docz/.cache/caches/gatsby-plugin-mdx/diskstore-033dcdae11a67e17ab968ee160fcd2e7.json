{"expireTime":9007200873526793000,"key":"gatsby-plugin-mdx-entire-payload-5b2c180d9557a16f8c3b167716bb2ade-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/Users/Beast/Desktop/code/React/rrdocz/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":119,"offset":120},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":122},"end":{"line":5,"column":29,"offset":150},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"R.A.D. Examples Coming Soon","position":{"start":{"line":8,"column":3,"offset":156},"end":{"line":8,"column":30,"offset":183},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":154},"end":{"line":8,"column":30,"offset":183},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":9,"column":1,"offset":185},"end":{"line":9,"column":4,"offset":188},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Dr. Quine Medicine","position":{"start":{"line":11,"column":4,"offset":195},"end":{"line":11,"column":22,"offset":213},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":192},"end":{"line":11,"column":22,"offset":213},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here is an example of a fun litte R.A.D. Route quine:","position":{"start":{"line":13,"column":1,"offset":217},"end":{"line":13,"column":54,"offset":270},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":217},"end":{"line":13,"column":54,"offset":270},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Simply running;","position":{"start":{"line":15,"column":1,"offset":274},"end":{"line":15,"column":16,"offset":289},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":274},"end":{"line":15,"column":16,"offset":289},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"rr -r q2","position":{"start":{"line":17,"column":1,"offset":293},"end":{"line":19,"column":4,"offset":311},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Will produce the source code, which is a child process that spawns, and runs it's own R.A.D. Route. It will proceed to execute and kill itself again every 2 seconds.","position":{"start":{"line":21,"column":1,"offset":315},"end":{"line":21,"column":166,"offset":480},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":315},"end":{"line":21,"column":166,"offset":480},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Lets take a look at the source code from ","position":{"start":{"line":23,"column":1,"offset":484},"end":{"line":23,"column":42,"offset":525},"indent":[]}},{"type":"strong","children":[{"type":"emphasis","children":[{"type":"text","value":"Dr. Quine \"Medicine Man\"","position":{"start":{"line":23,"column":45,"offset":528},"end":{"line":23,"column":69,"offset":552},"indent":[]}}],"position":{"start":{"line":23,"column":44,"offset":527},"end":{"line":23,"column":70,"offset":553},"indent":[]}}],"position":{"start":{"line":23,"column":42,"offset":525},"end":{"line":23,"column":72,"offset":555},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":484},"end":{"line":23,"column":72,"offset":555},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const { exec } = require('child_process');\n\nlet exe = ()=> {exec(`rr -r q2`, (error, stdout, stderr) => {\n    \n    console.log(stdout)\n    \n    console.error(stderr)\n    \n    console.error(error)\n    })}\nsetTimeout(() => {\n    \nexe()\n  \n}, 2000);","position":{"start":{"line":25,"column":1,"offset":559},"end":{"line":41,"column":4,"offset":829},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This code imports the child_process module in node, and then runs its own R.A.D. Route. This child_process is never killed so the first one will keep its print out, while the new child_process run in the backround.","position":{"start":{"line":43,"column":1,"offset":833},"end":{"line":43,"column":215,"offset":1047},"indent":[]}}],"position":{"start":{"line":43,"column":1,"offset":833},"end":{"line":43,"column":215,"offset":1047},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Check your activity monitor on MacOS, or top on Linux, or Process Manager on Windows.","position":{"start":{"line":45,"column":5,"offset":1055},"end":{"line":45,"column":90,"offset":1140},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":1051},"end":{"line":45,"column":90,"offset":1140},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In your process runner manager, you can see how this Quine, and how R.A.D. Routes itselt runs.","position":{"start":{"line":47,"column":1,"offset":1144},"end":{"line":47,"column":95,"offset":1238},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1144},"end":{"line":47,"column":95,"offset":1238},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"--Python=>\n          Python=>\n                  node=>\n                        Python=>\n                                node=>\n                                      Python=>\n                                               node=>\n                                                     Python=>\n                                                             node=>\n                                                                   Python=>\n                                                                           node=>\n                                                                                  Python=>\n                                                                                          node=>...","position":{"start":{"line":48,"column":1,"offset":1240},"end":{"line":62,"column":4,"offset":1968},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The initial Runner is written in Python, it runs another Python runner to get your R.A.D. Route, and passes that request to node to execute.","position":{"start":{"line":63,"column":1,"offset":1970},"end":{"line":63,"column":141,"offset":2110},"indent":[]}}],"position":{"start":{"line":63,"column":1,"offset":1970},"end":{"line":63,"column":141,"offset":2110},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this case the node process is invoking the original Python runner which restarts this loop.","position":{"start":{"line":65,"column":1,"offset":2114},"end":{"line":65,"column":95,"offset":2208},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2114},"end":{"line":65,"column":95,"offset":2208},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This process is repeated until either the computer runs out of memory, or the process is killed.","position":{"start":{"line":67,"column":1,"offset":2212},"end":{"line":67,"column":97,"offset":2308},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":2212},"end":{"line":67,"column":97,"offset":2308},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here you wi","position":{"start":{"line":70,"column":1,"offset":2314},"end":{"line":70,"column":12,"offset":2325},"indent":[]}}],"position":{"start":{"line":70,"column":1,"offset":2314},"end":{"line":70,"column":12,"offset":2325},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":72,"column":1,"offset":2327},"end":{"line":72,"column":31,"offset":2357},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":72,"column":31,"offset":2357}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/Beast/Desktop/code/React/rrdocz/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"rad-examples-coming-soon\"\n    }}>{`R.A.D. Examples Coming Soon`}</h1>\n    <hr></hr>\n    <h2 {...{\n      \"id\": \"dr-quine-medicine\"\n    }}>{`Dr. Quine Medicine`}</h2>\n    <p>{`Here is an example of a fun litte R.A.D. Route quine:`}</p>\n    <p>{`Simply running;`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`rr -r q2\n`}</code></pre>\n    <p>{`Will produce the source code, which is a child process that spawns, and runs it's own R.A.D. Route. It will proceed to execute and kill itself again every 2 seconds.`}</p>\n    <p>{`Lets take a look at the source code from `}<strong parentName=\"p\"><em parentName=\"strong\">{`Dr. Quine \"Medicine Man\"`}</em></strong></p>\n    <pre><code parentName=\"pre\" {...{}}>{`const { exec } = require('child_process');\n\nlet exe = ()=> {exec(\\`rr -r q2\\`, (error, stdout, stderr) => {\n    \n    console.log(stdout)\n    \n    console.error(stderr)\n    \n    console.error(error)\n    })}\nsetTimeout(() => {\n    \nexe()\n  \n}, 2000);\n`}</code></pre>\n    <p>{`This code imports the child_process module in node, and then runs its own R.A.D. Route. This child_process is never killed so the first one will keep its print out, while the new child_process run in the backround.`}</p>\n    <h3 {...{\n      \"id\": \"check-your-activity-monitor-on-macos-or-top-on-linux-or-process-manager-on-windows\"\n    }}>{`Check your activity monitor on MacOS, or top on Linux, or Process Manager on Windows.`}</h3>\n    <p>{`In your process runner manager, you can see how this Quine, and how R.A.D. Routes itselt runs.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`--Python=>\n          Python=>\n                  node=>\n                        Python=>\n                                node=>\n                                      Python=>\n                                               node=>\n                                                     Python=>\n                                                             node=>\n                                                                   Python=>\n                                                                           node=>\n                                                                                  Python=>\n                                                                                          node=>...\n`}</code></pre>\n    <p>{`The initial Runner is written in Python, it runs another Python runner to get your R.A.D. Route, and passes that request to node to execute.`}</p>\n    <p>{`In this case the node process is invoking the original Python runner which restarts this loop.`}</p>\n    <p>{`This process is repeated until either the computer runs out of memory, or the process is killed.`}</p>\n    <p>{`Here you wi`}</p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}